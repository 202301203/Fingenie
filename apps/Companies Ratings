import json
import numpy as np
import matplotlib.pyplot as plt

#Scoring Helpers
def normalize(value, mean, std, invert=False, clip=(0, 100)):
    """Scaling the values to a 0–100 range."""
    if value is None or np.isnan(value):
        return 50

    score = 50 + 15 * ((value - mean) / std)
    score = np.clip(score, clip[0], clip[1])

    if invert:
        score = 100 - score

    return score


def compute_subscores(data):
    """Computing normalized financial health scores based on key metrics."""
    bs = data["balance_sheet"]
    is_ = data["income_statement"]
    cf = data["cash_flow"]
    prev = data.get("previous_year", {})

    # Liquidity
    current_ratio = bs["current_assets"] / max(bs["current_liabilities"], 1)
    quick_ratio = (bs["current_assets"] - bs.get("inventory", 0)) / max(bs["current_liabilities"], 1)
    liquidity = (
        0.6 * normalize(current_ratio, mean=1.5, std=0.75) +
        0.4 * normalize(quick_ratio, mean=1.0, std=0.5)
    )

    # Stability
    debt_to_equity = bs["total_liabilities"] / max(bs["equity"], 1)
    interest_cover = is_["ebit"] / max(is_.get("interest_expense", 1), 1)
    retained_ratio = bs["retained_earnings"] / bs["total_assets"]
    stability = (
        0.4 * normalize(debt_to_equity, mean=1.5, std=1.0, invert=True) +
        0.4 * normalize(interest_cover, mean=4.0, std=2.0) +
        0.2 * normalize(retained_ratio, mean=0.3, std=0.15)
    )

    #Profitability
    roa = is_["net_income"] / bs["total_assets"]
    roe = is_["net_income"] / max(bs["equity"], 1)
    net_margin = is_["net_income"] / is_["revenue"]
    profitability = (
        0.4 * normalize(roa, mean=0.08, std=0.05) +
        0.3 * normalize(roe, mean=0.12, std=0.08) +
        0.3 * normalize(net_margin, mean=0.10, std=0.05)
    )

    #Efficiency
    asset_turnover = is_["revenue"] / bs["total_assets"]
    op_cf_ratio = cf["operating_cash_flow"] / bs["total_assets"]
    revenue_growth = (
        (is_["revenue"] - prev.get("revenue", is_["revenue"])) /
        max(prev.get("revenue", is_["revenue"]), 1)
    )
    efficiency = (
        0.4 * normalize(asset_turnover, mean=1.0, std=0.4) +
        0.3 * normalize(op_cf_ratio, mean=0.1, std=0.08) +
        0.3 * normalize(revenue_growth, mean=0.1, std=0.15)
    )

    #Transparency
    m_score = data.get("beneish_m_score", -2.0)
    z_score = data.get("altman_z_score", 3.0)
    transparency = (
        0.6 * normalize(m_score, mean=-2.2, std=0.4, invert=True) +
        0.4 * normalize(z_score, mean=3.0, std=1.0)
    )

    #Overall weighted score
    overall = (
        0.15 * liquidity +
        0.20 * stability +
        0.25 * profitability +
        0.20 * efficiency +
        0.20 * transparency
    )

    return {
        "Liquidity": liquidity,
        "Stability": stability,
        "Profitability": profitability,
        "Efficiency": efficiency,
        "Transparency": transparency,
        "Overall": overall
    }


#Visualization
def draw_single_gauge(score, label, desc, meaning):
    """Drawing a half-circle gauge for a given score."""
    fig, ax = plt.subplots(subplot_kw={'projection': 'polar'}, figsize=(5, 3))
    ax.set_theta_offset(np.pi)
    ax.set_theta_direction(-1)
    ax.set_ylim(0, 10)
    ax.set_axis_off()

    # Coloring segments
    zones = [
        (0, 0.628, '#FF4C4C', "Poor"),
        (0.628, 1.257, '#FFA64D', "Weak"),
        (1.257, 1.885, '#FFD93D', "Fair"),
        (1.885, 2.513, '#9FEF77', "Good"),
        (2.513, 3.142, '#3CB371', "Excellent")
    ]

    for start, end, color, _ in zones:
        ax.barh(5, width=end - start, left=start, height=5,
                color=color, alpha=0.9, edgecolor='white')

    #Needle
    theta = np.interp(score, [0, 100], [0, np.pi])
    ax.plot([theta, theta], [0, 5], color='black', lw=4, zorder=5)

    #Scale Labels
    for val in [0, 25, 50, 75, 100]:
        theta_val = np.interp(val, [0, 100], [0, np.pi])
        ax.text(theta_val, 5.8, f"{val}", fontsize=7, ha='center', va='center')

    ax.set_title(f"{label}\n({desc})", fontsize=13, pad=20, fontweight='bold')
    plt.xlabel(f"Score: {score:.1f}", fontsize=11, labelpad=25, fontweight='bold')
    plt.show()

    print(f"{label} Score: {score:.2f}/100")
    print(f"   {meaning}\n")


#Example data for testing
example_json = """
{
    "balance_sheet": {
        "current_assets": 120000,
        "current_liabilities": 60000,
        "retained_earnings": 40000,
        "equity": 90000,
        "total_liabilities": 180000,
        "total_assets": 270000
    },
    "income_statement": {
        "ebit": 35000,
        "net_income": 25000,
        "revenue": 300000
    },
    "cash_flow": {"operating_cash_flow": 28000},
    "previous_year": {"revenue": 250000},
    "beneish_m_score": -2.1
}
"""

data = json.loads(example_json)
scores = compute_subscores(data)

descriptions = {
    "Liquidity": "Short-term solvency strength",
    "Stability": "Debt–equity balance & solvency",
    "Profitability": "Earnings performance & margins",
    "Efficiency": "Asset and cash-flow utilization",
    "Transparency": "Accounting reliability & risk",
    "Overall": "Composite financial health"
}

meanings = {
    "Liquidity": "This shows how well the company can cover shortterm debts. A score above 70 is strong.",
    "Stability": "This reflects debt sustainability and equity balance. Higher value means lower risk.",
    "Profitability": "It measures how effectively the company turns sales into profit.",
    "Efficiency": "This assesses how well the company uses assets to generate revenue.",
    "Transparency": "It is Based on the Beneish M-score, higher value implies more reliable reporting.",
    "Overall": "An average measure of the company’s total financial health."
}

# Render gauges for all metrics
for label, score in scores.items():
    draw_single_gauge(score, label, descriptions[label], meanings[label])
