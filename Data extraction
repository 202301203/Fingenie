# Install required system packages
!apt-get install -y poppler-utils tesseract-ocr
!pip install pdf2image pytesseract pandas

import pytesseract
from pdf2image import convert_from_path
import pandas as pd
import re
import unicodedata
from google.colab import files
from concurrent.futures import ThreadPoolExecutor

# Upload the PDF
uploaded = files.upload()
pdf_path = list(uploaded.keys())[0]

# Convert PDF pages to images (low DPI for faster processing)
pages = convert_from_path(pdf_path, dpi=100)
print(f"PDF loaded with {len(pages)} pages")

# Keyword sets for classification
BALANCE_KEYWORDS = ["balance sheet", "equity", "assets", "liabilities", "reserves"]
PL_KEYWORDS = ["profit and loss", "statement of profit", "revenue", "expenses", "income", "eps", "earning"]
OTHER_KEYWORDS = ["cash flow", "fund flow"]
KEEP_KEYWORDS = BALANCE_KEYWORDS + PL_KEYWORDS + OTHER_KEYWORDS

# Classify the section of the financial report
def detect_section(text):
    t = text.lower()
    if any(k in t for k in BALANCE_KEYWORDS): return "balance"
    if any(k in t for k in PL_KEYWORDS): return "pl"
    if any(k in t for k in OTHER_KEYWORDS): return "other"
    return None

# Normalize and clean OCR text
def clean_text(text):
    text = unicodedata.normalize("NFKD", text)
    replacements = {
        "â€”": "-", "â€“": "-", "â€˜": "'", "â€™": "'",
        "₹": "INR", "rs.": "INR", "rs": "INR",
        "expanses": "expenses", "yaar": "year", "yeac": "year"
    }
    for k, v in replacements.items():
        text = text.replace(k, v)
    text = re.sub(r"[^A-Za-z0-9.,()%\-\/ ]+", "", text)
    text = re.sub(r"\s+", " ", text).strip()
    return text

# Check if a line is relevant based on keywords
def is_relevant_row(line):
    return any(k in line.lower() for k in KEEP_KEYWORDS)

# Parse a financial line into label and numbers
def parse_line(line):
    line = clean_text(line)
    numbers = re.findall(r"\(?-?\d{1,3}(?:,\d{3})*(?:\.\d+)?\)?", line)
    
    cleaned_nums = []
    for num in numbers:
        num = num.replace(",", "")
        if num.startswith("(") and num.endswith(")"):
            num = "-" + num[1:-1]
        try:
            cleaned_nums.append(float(num))
        except:
            continue

    label = re.split(r"\(?-?\d{1,3}(?:,\d{3})*(?:\.\d+)?\)?", line, 1)[0].strip()
    return {"Particular": label, "Values": cleaned_nums}

# Process each page with OCR and extract relevant data
def process_page(args):
    page_num, page = args
    print(f"OCR processing page {page_num}...")

    text = pytesseract.image_to_string(page, lang="eng")
    num_count = len(re.findall(r"[-]?\d{1,3}(?:,\d{3})*(?:\.\d+)?", text))

    if num_count < 10:
        print(f"Skipping page {page_num}: too few numeric entries")
        return None, []

    section = detect_section(text)
    if not section:
        print(f"Skipping page {page_num}: no relevant section detected")
        return None, []

    rows = []
    for line in text.split("\n"):
        if line.strip() and is_relevant_row(line):
            parsed = parse_line(line)
            if parsed["Values"]:
                rows.append(parsed)

    print(f"Page {page_num} classified as '{section}' with {len(rows)} relevant rows")
    return section, rows

# Run OCR concurrently across all pages
balance_rows, pl_rows, other_rows = [], [], []
with ThreadPoolExecutor(max_workers=4) as executor:
    results = list(executor.map(process_page, enumerate(pages, start=1)))

for section, rows in results:
    if section == "balance": balance_rows.extend(rows)
    elif section == "pl": pl_rows.extend(rows)
    elif section == "other": other_rows.extend(rows)

# Convert parsed rows into structured DataFrames
def expand_to_df(rows):
    if not rows:
        return pd.DataFrame()
    max_len = max(len(r["Values"]) for r in rows)
    for r in rows:
        for i in range(max_len):
            r[f"col{i+1}"] = r["Values"][i] if i < len(r["Values"]) else None
        del r["Values"]
    return pd.DataFrame(rows)

df_balance = expand_to_df(balance_rows)
df_pl = expand_to_df(pl_rows)
df_other = expand_to_df(other_rows)

# Save and download the extracted CSV files
if not df_balance.empty:
    df_balance.to_csv("balance_sheet.csv", index=False)
    files.download("balance_sheet.csv")

if not df_pl.empty:
    df_pl.to_csv("profit_loss.csv", index=False)
    files.download("profit_loss.csv")

if not df_other.empty:
    df_other.to_csv("other_financials.csv", index=False)
    files.download("other_financials.csv")

print("Extraction completed successfully.")


-----------------------------------------------------------------------------------------

import pandas as pd
import re
import glob

# Auto-detect the latest balance sheet file
balance_file = glob.glob("balance_sheet*.csv")[0]
print("Cleaning file:", balance_file)

df = pd.read_csv(balance_file)

# Step 1: Detect years from data
year_pattern = re.compile(r"20\d{2}")
years_found = []

for col in df.columns[1:]:
    values = df[col].dropna().astype(str).tolist()
    for val in values:
        match = year_pattern.search(val)
        if match:
            years_found.append(match.group())
            break

# Step 2: Rename columns
new_cols = ["Particular"]
if years_found:
    for i, _ in enumerate(df.columns[1:]):
        if i < len(years_found):
            new_cols.append(years_found[i])
        else:
            new_cols.append(f"Year_{i+1}")
else:
    for i, _ in enumerate(df.columns[1:], start=1):
        if i == 1:
            new_cols.append("Current_Year")
        elif i == 2:
            new_cols.append("Previous_Year")
        else:
            new_cols.append(f"Year_{i}")

df.columns = new_cols

# Step 3: Clean numeric values
for col in df.columns[1:]:
    df[col] = (
        df[col].astype(str)
        .str.replace(",", "", regex=False)
        .str.replace("(", "-", regex=False)
        .str.replace(")", "", regex=False)
        .str.replace("inr", "", regex=False)
        .str.strip()
    )
    df[col] = pd.to_numeric(df[col], errors="coerce")

# Save cleaned data
df.to_csv("balance_sheet_clean.csv", index=False)
df.to_excel("balance_sheet_clean.xlsx", index=False)

print("Cleaned balance sheet saved successfully")
